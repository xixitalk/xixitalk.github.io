<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on xixitalk&#39;s snippet</title>
    <link>https://xixitalk.github.io/tags/linux/</link>
    <description>Recent content in Linux on xixitalk&#39;s snippet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Nov 2018 15:05:49 +0800</lastBuildDate>
    
	<atom:link href="https://xixitalk.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>uClibc的TZ格式</title>
      <link>https://xixitalk.github.io/blog/2018/11/29/uClibc-TZ/</link>
      <pubDate>Thu, 29 Nov 2018 15:05:49 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2018/11/29/uClibc-TZ/</guid>
      <description>&lt;p&gt;在使用uClibc的linux环境， 时间换算总是不对，特别是出现夏令时。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>安装pi-hole</title>
      <link>https://xixitalk.github.io/blog/2018/05/27/install-pi-hole/</link>
      <pubDate>Sun, 27 May 2018 17:19:42 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2018/05/27/install-pi-hole/</guid>
      <description>&lt;p&gt;pi-hole是通过DNS来拦截网页广告服务，突出特点是有个&lt;strong&gt;好看的数据管理/数据查询/数据分析界面&lt;/strong&gt;。它是个组合套件：包括pi-hole admin网页管理（php网页）、dnsmasq、php5、lighttpd、sqlite、curl等一起搭建一个拦截广告的DNS服务，DNS服务是通过dnsmasq提供的。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>libgcc是什么</title>
      <link>https://xixitalk.github.io/blog/2018/05/07/what-is-libgcc/</link>
      <pubDate>Mon, 07 May 2018 11:34:13 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2018/05/07/what-is-libgcc/</guid>
      <description>&lt;p&gt;一个产品flash空间非常小，只有16MB，所以不必要的东西都要裁剪掉。一次有个研发问我：发现有个程序如果缺失&lt;code&gt;libgcc_s.so.1&lt;/code&gt;，pthread_join()就会运行不正常，但是无论是&lt;code&gt;ldd&lt;/code&gt;还是&lt;code&gt;readelf -d&lt;/code&gt;都没有发现依赖&lt;code&gt;libgcc_s.so.1&lt;/code&gt;。搜索得知PC linux上也大量类似&lt;code&gt;libgcc_s.so.1 must be installed for pthread_cancel to work&lt;/code&gt;的问题。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>模块unsupported RELA relocation:275错误</title>
      <link>https://xixitalk.github.io/blog/2018/05/03/linux-module-unsupported-RELA-relocation/</link>
      <pubDate>Thu, 03 May 2018 14:58:17 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2018/05/03/linux-module-unsupported-RELA-relocation/</guid>
      <description>&lt;p&gt;ARM A53芯片有个Erratum，编号是843419，在linux内核打开修正选项后，一些模块（ko）会insmod失败，提示：&lt;/p&gt;

&lt;p&gt;内核选项：CONFIG_ARM64_ERRATUM_843419&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>交叉编译perf(ARM Linux)</title>
      <link>https://xixitalk.github.io/blog/2018/05/02/perf-on-arm-linux/</link>
      <pubDate>Wed, 02 May 2018 09:14:37 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2018/05/02/perf-on-arm-linux/</guid>
      <description>&lt;p&gt;关键词：ARM linux perf&lt;/p&gt;

&lt;p&gt;perf对于Linux性能分析非常有用。perf在linux上编译依赖几个库，库的编译问题不大，但是要打ARM架构的补丁不好操作。所以不如索性用buildroot制作一个和平台兼容的交叉编译链，在buildroot里自动选择上需要的库，让buildroot自动下载打补丁和编译，这样操作最省事省力。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内核硬浮点VFP开关</title>
      <link>https://xixitalk.github.io/blog/2018/01/11/vfpv3/</link>
      <pubDate>Thu, 11 Jan 2018 11:50:48 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2018/01/11/vfpv3/</guid>
      <description>&lt;p&gt;一个产品编译链打开了VFPv3开关，重新编译版本后发现内核启动init失败。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux信号回调栈空间探究</title>
      <link>https://xixitalk.github.io/blog/2017/12/20/linux-signal-handler-stack/</link>
      <pubDate>Wed, 20 Dec 2017 14:13:53 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2017/12/20/linux-signal-handler-stack/</guid>
      <description>&lt;p&gt;Linux上通过signal()或者sigaction()可以自定义注册一个信号的信号回调，那么信号回调是执行的栈空间在哪里呢？以下代码以内核3.4.x  ARM架构为例。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>便于代码阅读清理内核代码</title>
      <link>https://xixitalk.github.io/blog/2017/12/03/clean-linux-kernel-file/</link>
      <pubDate>Sun, 03 Dec 2017 14:42:05 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2017/12/03/clean-linux-kernel-file/</guid>
      <description>&lt;p&gt;Linux代码庞大，代码阅读时候发现无关代码太多，清理一下无关代码便于阅读（清理的标准是某产品内核编译没有用到的文件）。&lt;/p&gt;

&lt;p&gt;原理：版本编译用到的文件会更新文件的atime，atime没有更新的文件就是编译无关文件。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>造了一个轮子：sleep命令</title>
      <link>https://xixitalk.github.io/blog/2016/09/15/sleep-linux-command/</link>
      <pubDate>Thu, 15 Sep 2016 08:03:35 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2016/09/15/sleep-linux-command/</guid>
      <description>&lt;p&gt;我们一个嵌入式平台，系统是&lt;code&gt;uClinux&lt;/code&gt;，不支持动态库，只能用静态库，每个程序都包含了所有调用的函数代码，包括C库的。客户一个产品压力测试时偶现系统内存不够，期望当天我们能协助他们解决，内存优化有很多方向，不好入手啊。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>产品中多个不明可执行程序dvrHelper</title>
      <link>https://xixitalk.github.io/blog/2016/08/30/virus-dvrHelper/</link>
      <pubDate>Tue, 30 Aug 2016 16:48:47 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2016/08/30/virus-dvrHelper/</guid>
      <description>&lt;p&gt;一个数据类产品，测试报告描述：FTP上传下载加浏览器看视频，一个小时内必死机。&lt;/p&gt;

&lt;p&gt;死机现场初步分析：死机直接原因是系统内存耗尽，但是发现进程里多了三个奇怪的进程，进程名都像是随机字符串，两个死机现场都有，并且进程名还随机的不一样。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>netlink遇到ENOBUFS错误</title>
      <link>https://xixitalk.github.io/blog/2016/08/18/netlink-ENOBUFS/</link>
      <pubDate>Thu, 18 Aug 2016 08:49:42 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2016/08/18/netlink-ENOBUFS/</guid>
      <description>&lt;p&gt;一个场景：USB插拔的时候内核会通过netlink广播到user层，多个应用接收这个消息。但是出现了errno 105错误，105错误是：&lt;code&gt;No buffer space available&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在内核里获取当前任务名</title>
      <link>https://xixitalk.github.io/blog/2016/08/10/current-comm/</link>
      <pubDate>Wed, 10 Aug 2016 08:33:02 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2016/08/10/current-comm/</guid>
      <description>&lt;p&gt;遇到一个问题，在一个内核模块里使用current-&amp;gt;comm保存当前任务名，编译报错:&lt;code&gt;dereferencing pointer to incomplete type&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jemalloc add2line ligsigsegv</title>
      <link>https://xixitalk.github.io/blog/2016/08/03/jemalloc-add2line-ligsigsegv/</link>
      <pubDate>Wed, 03 Aug 2016 18:38:22 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2016/08/03/jemalloc-add2line-ligsigsegv/</guid>
      <description>&lt;p&gt;一些定位工具还需要研究&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux内核代码瘦身</title>
      <link>https://xixitalk.github.io/blog/2016/07/20/linux-kernel-source-strip/</link>
      <pubDate>Wed, 20 Jul 2016 21:07:23 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2016/07/20/linux-kernel-source-strip/</guid>
      <description>&lt;p&gt;linux内核代码瘦身，原理：把不参与编译的代码删除，这样用Source Insight工具阅读代码的时候就轻简了很多。&lt;/p&gt;

&lt;p&gt;例子数据：原本一个嵌入式linux内核代码1万7千个C文件，精简之后只有1222个C文件，删除了1万6千个C文件。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux内核代码预处理后便于阅读</title>
      <link>https://xixitalk.github.io/blog/2016/07/19/preprocess-linux-kernel/</link>
      <pubDate>Tue, 19 Jul 2016 13:39:01 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2016/07/19/preprocess-linux-kernel/</guid>
      <description>&lt;p&gt;linux 内核庞大而复杂。内核代码阅读的时候，有没有遇到因为宏定义或者inline层次太深而不知道到底代码是什么样子。代码预处理可以解决这个难题。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux栈和内存管理</title>
      <link>https://xixitalk.github.io/blog/2016/07/18/linux-stack-and-memory-management/</link>
      <pubDate>Mon, 18 Jul 2016 09:11:52 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2016/07/18/linux-stack-and-memory-management/</guid>
      <description>&lt;p&gt;先记录，待细看&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pthread退出时自动回收资源</title>
      <link>https://xixitalk.github.io/blog/2016/07/18/pthread-autoclean-when-exiting/</link>
      <pubDate>Mon, 18 Jul 2016 08:49:16 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2016/07/18/pthread-autoclean-when-exiting/</guid>
      <description>&lt;p&gt;pthread线程创建后默认属性是joinable，线程函数执行完资源不会自动回收线程资源，需要主进程&lt;code&gt;pthread_join&lt;/code&gt;进行回收，否则就会造成不必要的内存占用，频繁创建退出线程可能会造成系统内存耗尽。除了&lt;code&gt;pthread_join&lt;/code&gt;用这种办法更好些。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux内核kmalloc和vmalloc的区别</title>
      <link>https://xixitalk.github.io/blog/2016/07/18/kmalloc-vs-vmalloc/</link>
      <pubDate>Mon, 18 Jul 2016 08:41:56 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2016/07/18/kmalloc-vs-vmalloc/</guid>
      <description>&lt;p&gt;kmalloc 和 vmalloc的区别&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux kernel全局变量contig_page_data含义</title>
      <link>https://xixitalk.github.io/blog/2016/07/13/kernel-contig_page_data/</link>
      <pubDate>Wed, 13 Jul 2016 09:03:20 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2016/07/13/kernel-contig_page_data/</guid>
      <description>&lt;p&gt;&lt;code&gt;contig_page_data&lt;/code&gt;是内核内存管理一个很重要的变量。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux应用内存占用maps分析</title>
      <link>https://xixitalk.github.io/blog/2016/07/12/app-mem-used-on-linux/</link>
      <pubDate>Tue, 12 Jul 2016 10:50:20 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2016/07/12/app-mem-used-on-linux/</guid>
      <description>&lt;p&gt;假设一个应用的pid是PID，则&lt;code&gt;cat /proc/PID/maps&lt;/code&gt;显示这个应用的内存占用。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux内存占用分布分析</title>
      <link>https://xixitalk.github.io/blog/2016/07/11/linux-mem-used/</link>
      <pubDate>Mon, 11 Jul 2016 21:07:20 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2016/07/11/linux-mem-used/</guid>
      <description>&lt;h2 id=&#34;1-内存占用&#34;&gt;1. 内存占用&lt;/h2&gt;

&lt;p&gt;linux内存占用分两部分：一部分是不可见的，内核代码段数据段的本身的占用空间，对于PC 上几个G的内存来说可能很小可以忽略不计，但是只有几十M内存的嵌入式环境来说就不能忽略了。另一部分就是linux系统可见的内存，&lt;code&gt;free&lt;/code&gt;命令里的&lt;code&gt;total&lt;/code&gt;或者&lt;code&gt;cat /proc/meminfo&lt;/code&gt;里看到的&lt;code&gt;MemTotal&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux常用命令和配置</title>
      <link>https://xixitalk.github.io/blog/2013/07/10/linux-command/</link>
      <pubDate>Wed, 10 Jul 2013 16:08:18 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2013/07/10/linux-command/</guid>
      <description>&lt;p&gt;下面是最近工作需要用到的命令，记录下来以供查阅。&lt;/p&gt;

&lt;h3 id=&#34;添加新用户test&#34;&gt;添加新用户test&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;useradd test
passwd test
mkdir /home/test
chown test /home/test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>中国时区：CCT</title>
      <link>https://xixitalk.github.io/blog/2013/07/06/china-coast-time/</link>
      <pubDate>Sat, 06 Jul 2013 08:17:55 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2013/07/06/china-coast-time/</guid>
      <description>&lt;p&gt;octopress的&lt;code&gt;rake generate&lt;/code&gt;的时候，如果时间在晚上22：00到24：00左右，发现生成的博客HTML文件日期会是第二天的日期。Google之后有人说要加&lt;code&gt;TZ=CCT&lt;/code&gt;来设定时区。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>grep命令手册</title>
      <link>https://xixitalk.github.io/blog/2013/06/18/grep-man/</link>
      <pubDate>Tue, 18 Jun 2013 17:51:43 +0800</pubDate>
      
      <guid>https://xixitalk.github.io/blog/2013/06/18/grep-man/</guid>
      <description>&lt;p&gt;详细参看这个博文 &lt;a href=&#34;http://blog.51yip.com/linux/1008.html&#34; target=&#34;_blank&#34;&gt;http://blog.51yip.com/linux/1008.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GNU Grep 2.14 &lt;a href=&#34;http://www.gnu.org/software/grep/manual/grep.html&#34; target=&#34;_blank&#34;&gt;http://www.gnu.org/software/grep/manual/grep.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我常用grep命令是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grep -r -n -I Search_String  DIR
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-I 跳过二进制文件&lt;br /&gt;
-r 递归子目录&lt;br /&gt;
-n 显示匹配的行号&lt;br /&gt;
Search_String 寻找匹配的字符串&lt;br /&gt;
DIR 查找的目录范围&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>